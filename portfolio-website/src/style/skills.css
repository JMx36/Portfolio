.skills-section
{
    display: flex;
    flex-direction: column;
    max-width: 100%;
}

.skills-section .header
{
    display: flex;
    margin: 5% 5%;
    margin-bottom: 1%;
    align-items: center;
    justify-content: center;
}

.title-text-padding
{
    margin: 0% 7%;
}


.tech-and-tools
{
    display: flex;
    flex-direction: column;
    /* justify-content: center;
    align-items: center; */
}

.tech-and-tools .top-part
{
    display: flex;
    width: 100%;

    align-items: center;
    justify-content: center;
    margin-top: 10%;
}

.caption
{
    color: black;
    text-align: center;
    margin: 2% 5%;
}

.skills-buttons-container
{
    display: flex;
    margin-top: 3%;
    margin-bottom: 10%;
    box-sizing: border-box;
    justify-content: center;
    align-items: center;
}

.skills-buttons-container p
{
    padding: 0;
    margin: 0% 5%;
}

.carousel-container
{
    --play-state: running;
    width: 100%;
    margin-top: 2%;
    overflow: hidden;
    border-top: solid 3px black;
    border-bottom: solid 3px black;
}

.carousel-inner
{
    display: flex;
    align-items: center;
    width: 100%;
    gap: 1%;
    transform: translateX(-141%); 
    transform: translateX(-5%); 
    animation: slide 10s linear infinite;
}

@keyframes slide {
    
    0% 
    {
        transform: translateX(-5%);
    }

    100%
    {
        transform: translateX(-141%);
    }
}

.carousel-paused
{
    animation-play-state: paused;
}

.bottom-header
{
    margin: 3% 5%;
    width: 90%;
    margin-bottom: 6%;
}


@media (max-width: 800px) {


    .skills-description .boxes-container .description-box
    {
        padding: 3rem 1rem;
        max-width: 300px;
        min-width: 100px;
        min-height: 500px;
    }

    .skills-buttons-container
    {
        flex-direction: column;
        margin-top: 4%;
    }

    .skills-buttons-container .button-util
    {
        margin: auto !important;
    }

    .skills-buttons-container p
    {
        margin: 5% 0%;
    }
}

/* Description Boxes */


.skills-description
{
    display: flex;
    flex-direction: column;
    background-color: var(--background-blue);
}

.skills-description .boxes-container
{
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin: 5% 5%;
    max-width: 100%;
    justify-content: space-evenly;
    align-items: center;
    box-sizing: border-box;
}

.description-box
{
    position: relative;
    display: flex;
    flex-direction: column;
    border-radius: 26px; /* Rounded corners */
    max-width: 500px;
    min-width: 345px;
    min-height: 500px;
    box-sizing: border-box;
    z-index: 0;
}

.description-box-blur
{
    position: absolute;
    filter: blur(7px);
    z-index: 1;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: 26px;
}


/* Circular Skills */

.circular-skills-section
{
    max-width: 100%;
    display: flex;
    flex-direction: column;
}

.circular-skills-container
{
    position: relative;
    --radius: clamp(100px, 35vw, 200px);
    height: calc((var(--radius) * 2) + 100px);
    --start-degree-angle: -90deg;
    --move-angle-factor: 72deg;
}

.selector-circle
{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: max(180px, 15%);
    aspect-ratio: 1/1;
}

.selector-circle .blur-circle
{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: radial-gradient(47.4% 50% at 50% 50%, #025968 73%, #FFFFFF 80%);
    /* background: var(--background-blue); */
    filter: blur(clamp(6px, 3vw, 24px));
    
}

.selector-circle .text
{
    position: absolute;
    margin: 0;
    padding: 0;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);

    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    color: white;
    gap: 10px;
    max-width: 400px;
}

.selector-circle img
{
    display: inline-block;
    width: 50px;
}

.absolute-center
{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

/* Animations Classes and Keyframes */

.blur-circle-idle-anim
{
    animation: idle-circle 4s linear infinite;
}

.blur-circle-expand-anim
{
    animation: expand-circle 0.7s linear 1;
}

.move-corner1
{
    --rotation: var(--start-degree-angle);
    transform: rotate(var(--rotation)) translateX(var(--radius)) rotate(calc(-1 * var(--rotation))) translate(-50%, -50%);
}

.move-corner2
{
    --rotation: calc(var(--start-degree-angle) + (1 * var(--move-angle-factor)));
    transform: rotate(var(--rotation)) translateX(var(--radius)) rotate(calc(-1 * var(--rotation))) translate(-50%, -50%)
    /* transform: rotate(0deg)  translateX(calc(var(--radius) + 50px)) rotate(0deg) translate(-50%, -50%); */
}

.move-corner3
{
    --rotation: calc(var(--start-degree-angle) + (2 * var(--move-angle-factor)));
    transform: rotate(var(--rotation)) translateX(var(--radius)) rotate(calc(-1 * var(--rotation))) translate(-50%, -50%)
}

.move-corner4
{
    --rotation: calc(var(--start-degree-angle) + (3 * var(--move-angle-factor)));
    transform: rotate(var(--rotation)) translateX(var(--radius)) rotate(calc(-1 * var(--rotation))) translate(-50%, -50%)
}

.move-corner5
{
    --rotation: calc(var(--start-degree-angle) + (4 * var(--move-angle-factor)));
    transform: rotate(var(--rotation)) translateX(var(--radius)) rotate(calc(-1 * var(--rotation))) translate(-50%, -50%)
}

.move-corner1-initial
{
    animation: move-corner1-initial 1s linear 1;
}
.move-corner2-initial
{
    animation: move-corner2-initial 1s linear 1;
}
.move-corner3-initial
{
    animation: move-corner3-initial 1s linear 1;
}
.move-corner4-initial
{
    animation: move-corner4-initial 1s linear 1;
}
.move-corner5-initial
{
    animation: move-corner5-initial 1s linear 1;
}

.move-corner1-cycle
{
    animation: move-corner1-cycle 30s linear infinite;
}

.move-corner2-cycle
{
    animation: move-corner2-cycle 30s linear infinite;
}

.move-corner3-cycle
{
    animation: move-corner3-cycle 30s linear infinite;
}

.move-corner4-cycle
{
    animation: move-corner4-cycle 30s linear infinite;
}


.move-corner5-cycle
{
    animation: move-corner5-cycle 30s linear infinite;
}

@keyframes move-corner1-initial{
    
    0%
    {
        transform: translate(-50%, -50%);
    }
    100%
    {
        transform: rotate(var(--rotation)) translateX(var(--radius)) rotate(calc(-1 * var(--rotation))) translate(-50%, -50%);
    }
}

@keyframes move-corner2-initial{
    0%
    {
        transform: translate(-50%, -50%);
    }
    100%
    {
        transform: rotate(var(--rotation)) translateX(calc(var(--radius))) rotate(calc(-1 * var(--rotation))) translate(-50%, -50%);
    }
}

@keyframes move-corner3-initial{
    0%
    {
        transform: translate(-50%, -50%);
    }
    100%
    {
        transform: rotate(var(--rotation))  translateX(calc(var(--radius))) rotate(calc(-1 * var(--rotation))) translate(-50%, -50%);
    }
}


@keyframes move-corner4-initial{
    0%
    {
        transform: translate(-50%, -50%);
    }
    100%
    {
        transform: rotate(var(--rotation))  translateX(calc(var(--radius))) rotate(calc(-1 * var(--rotation))) translate(-50%, -50%);
    }
}


@keyframes move-corner5-initial{
    0%
    {
        transform: translate(-50%, -50%);
    }
    100%
    {
        --rotation: calc(var(--start-degree-angle) + (4 * var(--move-angle-factor)));

        transform: rotate(var(--rotation))  translateX(calc(var(--radius))) rotate(calc(-1 * var(--rotation))) translate(-50%, -50%);
    }
}


@keyframes move-corner1-cycle {
    0%
    {
        transform: rotate(var(--rotation))  translateX(calc(var(--radius))) rotate(calc(-1 * var(--rotation))) translate(-50%, -50%);
    }

    100%
    {
        transform: rotate(calc(var(--rotation) + 360deg)) translateX(calc(var(--radius))) rotate(calc(-1 * calc(var(--rotation) + 360deg))) translate(-50%, -50%);
    }
}

@keyframes move-corner2-cycle {
    0%
    {
        transform: rotate(var(--rotation)) translateX(calc(var(--radius))) rotate(calc(-1 * var(--rotation))) translate(-50%, -50%);
    }

    100%
    {
        transform: rotate(calc(var(--rotation) + 360deg)) translateX(calc(var(--radius))) rotate(calc(-1 * calc(var(--rotation) + 360deg))) translate(-50%, -50%);
    }
}

@keyframes move-corner3-cycle {
    0%
    {
        transform: rotate(var(--rotation)) translateX(calc(var(--radius))) rotate(calc(-1 * var(--rotation))) translate(-50%, -50%);   
    }

    100%
    {
        transform: rotate(calc(var(--rotation) + 360deg)) translateX(calc(var(--radius))) rotate(calc(-1 * calc(var(--rotation) + 360deg))) translate(-50%, -50%);
    }
}


@keyframes move-corner4-cycle {
    0%
    {
        transform: rotate(var(--rotation))  translateX(calc(var(--radius))) rotate(calc(-1 * var(--rotation))) translate(-50%, -50%);
    }

    100%
    {
        transform: rotate(calc(var(--rotation) + 360deg)) translateX(calc(var(--radius))) rotate(calc(-1 * calc(var(--rotation) + 360deg))) translate(-50%, -50%);
    }
}


@keyframes move-corner5-cycle {
    0%
    {
        transform: rotate(var(--rotation))  translateX(calc(var(--radius))) rotate(calc(-1 * var(--rotation))) translate(-50%, -50%);
    }

    100%
    {
        transform: rotate(calc(var(--rotation) + 360deg)) translateX(calc(var(--radius))) rotate(calc(-1 * calc(var(--rotation) + 360deg))) translate(-50%, -50%);
    }
}


@keyframes idle-circle 
{
    0% 
    {
        width: max(60px, 1%);

    }
    50%
    {
        width: max(150px, 10%);

    }

    100%
    {
        width: max(60px, 1%);
    }
}

@keyframes expand-circle {
    0% 
    {
        width: max(100px, 1%);
    }
    100%
    {
        width: max(180px, 15%);
    }
}